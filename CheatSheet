# CHECK PYTHON VERSION IN THE SYSTEM
import sys
print(sys.version)

# FIRST LINE OF CODE AS A PYTHON PROGRAMMER
print("Hello world: Let's get the learning started")

# PYTHON VARIABLES
# Python variables can store data of different types, and different types can do different things.
# Here are some examples of different types of Python variables:

# Numeric Types:
# int
a = 5
print(f"Variable a is of type {type(a)} and value {a}")

# float
b = 5.5
print(f"Variable b is of type {type(b)} and value {b}")

# complex
c = 1j
print(f"Variable c is of type {type(c)} and value {c}")

# String Type:
# str
d = "HELLO"
print(f"Variable d is of type {type(d)} and value {d}")

# Boolean Type:
# bool
e = True
print(f"Variable e is of type {type(e)} and value {e}")

# List Type:
# list
f = ["Apple", "Banana", "Cherry"]
print(f"Variable f is of type {type(f)} and value {f}")

# Tuple Type:
# tuple
g = (10.0, 20.0)
print(f"Variable g is of type {type(g)} and value {g}")

# Set Type:
# set
h = {1, 2, 3, 4, 5}
print(f"Variable h is of type {type(h)} and value {h}")

# Dictionary Type:
# dict
i = {"name": "Kartik", "age": 27, "is_programmer": True}
print(f"Variable i is of type {type(i)} and value {i}")

# None Type:
# NoneType
j = None
print(f"Variable j is of type {type(j)} and value {j}")

# If you want to specify the data type of a variable, this can be done with casting.
x = str(3)    # x will be '3'
y = int(3)    # y will be 3
z = float(3)  # z will be 3.0

# You can get the data type of a variable with the type() function.
print(type(x))
print(type(y))
print(type(z))

# String variables can be declared either by using single or double quotes:
x = "Data Scientist is my goal"
# is the same as
x = 'Data Scientist is my goal'

# VARIABLE NAMES: BASIC RULES TO REMEMBER WHILE ASSIGNING A VARIABLE NAME
# - A variable name must start with a letter or the underscore character.
# - A variable name cannot start with a number.
# - A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ).
# - Variable names are case-sensitive (age, Age, and AGE are three different variables).
# - A variable name cannot be any of the Python keywords.

# ONE CAN ASSIGN MULTIPLE VALUES TO MULTIPLE VARIABLES IN ONE LINE:
x, y, z = "Orange", "Banana", "Cherry"
print(x)
print(y)
print(z)

# GLOBAL VARIABLE
# If you create a variable with the same name inside a function, this variable will be local, and can only be used inside the function.
# The global variable with the same name will remain as it was, global and with the original value.
x = "awesome"
def myfunc():
    x = "fantastic"
    print("Python is " + x)

myfunc()
print("Python is " + x)

# GLOBAL KEYWORD
# To change the value of a global variable inside a function, refer to the variable by using the global keyword:
x = "awesome"
def myfunc():
    global x
    x = "fantastic"

myfunc()
print("Python is " + x)

# BUILT-IN DATA TYPES
# Variables can store data of different types, and different types can do different things.
x = 5
print(type(x))

# Numeric Types:
x = 1    # int
y = 2.8  # float
z = 1j   # complex (Complex numbers are written with a "j" as the imaginary part)
print(type(x))
print(type(y))
print(type(z))

# You can convert from one type to another with the int(), float(), and complex() methods.

# Python has a built-in module called random that can be used to make random numbers:
import random
print(random.randrange(1, 10))

# TEXT TYPE: STR (STRING)
# String variables can be declared either by using single or double quotes.
message = "Data Scientist is my goal"
print(message)
message = 'Data Scientist is my goal'
print(message)

# STRING SLICING
# You can return a range of characters by using the slice syntax.
# Specify the start index and the end index, separated by a colon, to return a part of the string.
x = "I am a skilled Business Analyst with diverse experience in consulting and data analysis."
y = "I am currently looking for a job."

SI = 7
EI = 13
print(x[SI:EI + 1])  # Sliced portion "skilled"
print(x[:EI])        # Sliced from start to "skilled"
print(x[SI:])        # Sliced from "skilled" to the end

# CONVERTING CASE
print(x.upper())     # Entire string in upper case
print(x.lower())     # Entire string in lower case

# REMOVING WHITESPACE
print(("  " + x + "  ").strip())  # Whitespace removed

# REPLACING A STRING
print(x.replace("skilled", "experienced"))  # Replacing "skilled" with "experienced"

# SPLITTING THE STRING
split_words = x.split()
print(split_words)  # Splitting the string into a list of words

# JOINING SPLIT WORDS BACK INTO A SINGLE STRING
joined_string = " ".join(split_words)
print(joined_string)  # Joining the list of words back into a string

# STRING CONCATENATION
print(x + " " + y)  # Concatenating x and y

# FINAL CREATIVE OUTPUT USING THE ABOVE TECHNIQUES
print("\nCreative Output:")
creative_output = (
    "Looking for a job with a focus on: " + x[7:13 + 1] + " Business Analysis.\n" +
    "Expertise: " + x[SI:].upper() + "\n" +
    y.upper() + "\n" +
    "No whitespace: " + ("  " + x + "  ").strip() + "\n" +
    "Replacing: " + x.replace("diverse", "extensive") + "\n" +
    "Split words: " + ", ".join(x.split()) + "\n" +
    "Join again: " + " ".join(x.split()) + " " + y
)
print(creative_output)

# F-STRING: FORMATTING STRING
# To specify a string as an f-string, simply put an f in front of the string literal, and add curly brackets {} as placeholders for variables and other operations.
age = 27
txt = f"Hi, I am {age} years old"
print(txt)

# Adding salary expectation in placeholder example using f-string
salary_inr = 1000000  # 10 LPA in INR
salary_gbp = 25000    # 25000 pounds per annum
txt_salary = f"My expected salary is {salary_inr:,} INR or {salary_gbp:,} GBP per annum."
print(txt_salary)

# ESCAPE CHARACTERS
# To insert characters that are illegal in a string, use an escape character.
txt = "I have the skill set and desire to be the best \"DATA SCIENTIST\" that you can hire."
print(txt)

# BOOLEAN TYPE: BOOL (TRUE/FALSE)
is_programmer = True
is_not_programmer = False
print(f"Is a programmer: {is_programmer}")
print(f"Is not a programmer: {is_not_programmer}")

# BINARY TYPES
# bytes (b" ")
byte_data = b"Hello"
print(byte_data)

# bytearray (bytearray())
bytearray_data = bytearray(5)
print(bytearray_data)

# memoryview (memoryview(bytes()))
memoryview_data = memoryview(byte_data)
print(memoryview_data)

# NONE TYPE: NONETYPE (NONE)
no_value = None
print(no_value)

# TYPES OF ARRAYS
# list []
fruits = ["Apple", "Banana", "Cherry"]
print(fruits)

# tuple ()
coordinates = (10.0, 20.0)
print(coordinates)

# set {}
unique_numbers = {1, 2, 3, 4, 5}
print(unique_numbers)

# Example of slicing in a list
numbers = [1, 2, 3, 4, 5]
print(numbers[1:3])  # Slicing from index 1 to 2

# SET TYPES
# set {}
random_set = {3, 1, 4, 1, 5, 9}
print(random_set)  # Values will be in ascending order and duplicates removed

# frozenset (frozenset({}))
immutable_set = frozenset(random_set)
print(immutable_set)

# TUPLES
# Tuples are immutable in nature and can contain heterogeneous data.
data = ('A', 10, 10.5, True)
print(data)
print(type(data[0]))  # Type of the first element in the tuple

# SET OPERATIONS
unique_items = {1, 2, 2, 3, 4}
print(unique_items)  # Duplicates are removed, values in ascending order

# frozenset (frozenset({}))
immutable_items = frozenset(unique_items)
print(immutable_items)

# Booleans are counted as 0 (False) or 1 (True)
boolean_set = {True, False, True, False, 1, 0}
print(boolean_set)  # Prints {False, True} since True is 1 and False is 0

# MAPPING TYPE: DICTIONARY
# dict (dictionary) {key: value}
person = {
    "name": "Kartik",
    "age": 27,
    "is_programmer": True
}
print(person)

# Adding slicing and data type checking for a string example
sample_string = "Hello, World!"
# Slicing the string
print(sample_string[0:5])  # Output: Hello

# Check type of sliced part
sliced_part = sample_string[0:5]
print(type(sliced_part))  # Output: <class 'str'>

# Adding more examples to illustrate the concepts

# Example of list slicing
tech_stack = ["Python", "SQL", "R", "Tableau", "PowerBI"]
print(tech_stack[1:4])  # Output: ['SQL', 'R', 'Tableau']

# Example of set operations
programming_languages = {"Python", "SQL", "R"}
print(programming_languages)  # Output: {'Python', 'SQL', 'R'}

# Example of using f-strings for formatted output
name = "Kartik"
goal = "Data Scientist"
print(f"My name is {name} and my goal is to become a {goal}.")

